geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
homerange%>%
ggplot(aes(x = taxon, y = log10.mass, fill="taxon")) +
geom_violin(alpha = .3, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
homerange%>%
ggplot(aes(x = taxon, y = log10.mass)) +
geom_violin(alpha = .3, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
homerange%>%
ggplot(aes(x = taxon, y = log10.mass, fill=taxon)) +
geom_violin(alpha = .3, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
homerange%>%
ggplot(aes(x = taxon, y = log10.mass, fill="taxon")) +
geom_violin(alpha = .3, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
homerange%>%
ggplot(aes(x = taxon, y = log10.mass, fill=taxon)) +
geom_violin(alpha = .3, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
homerange%>%
ggplot(aes(x = taxon, y = log10.mass, fill=taxon)) +
geom_violin(alpha = .7, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
heartrate
heartrate_long <- heartrate %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_long
heartrate_long %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")
heartrate_diff <- heartrate%>%
mutate(across(c(a,b,c,d), ~ . - no_drug)) %>%
select(-no_drug) %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_diff
heartrate_diff <- heartrate%>%
mutate(across(c(a,b,c,d), ~ . - no_drug)) %>%
select(-no_drug) %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_diff
heartrate_diff %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
# scale_fill_graient2 lets you set a color direction for zero (mid), positive (high), and negative (low)
penguins%>%
ggplot(aes(species, log10.mass, fill= sex)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins%>%
ggplot(aes(x = species, y = log10.mass, fill= sex)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins
penguins%>%
ggplot(aes(x = species, y = body_mass_g, fill= sex)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins%>%
ggplot(aes(x = species, y = sex, fill= body_mas_g)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins%>%
ggplot(aes(x = species, y = sex, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins%>%
ggplot(aes(x = sex, y = species, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins%>%
filter(body_mass_g !="NA")
ggplot(aes(x = sex, y = species, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins%>%
filter(body_mass_g !="NA")%>%
ggplot(aes(x = sex, y = species, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins%>%
filter(body_mass_g !="NA")%>%
filter(sex!= "NA")%>%
ggplot(aes(x = sex, y = species, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
penguins%>%
filter(body_mass_g !="NA")%>%
filter(sex!= "NA")%>%
ggplot(aes(x = sex, y = species, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient2(low="orange", mid = "white", high="blue")
penguins%>%
filter(body_mass_g !="NA")%>%
filter(sex!= "NA")%>%
ggplot(aes(x = sex, y = species, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient(low="orange", high="blue")
penguins%>%
filter(body_mass_g !="NA")%>%
filter(sex!= "NA")%>%
ggplot(aes(x = species, y = sex, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient(low="orange", high="blue")
penguins%>%
#filter(body_mass_g !="NA")%>%
#filter(sex!= "NA")%>%
na.exclude()%>%
ggplot(aes(x = species, y = sex, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient(low="orange", high="blue")
library(tidyverse)
#install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
library(tidyverse)
#install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
homerange <- read_csv("data/modified_Tamburelloetal_HomeRangeDatabase.csv")
flying_vec <- homerange %>%
filter(locomotion == "flying")%>%
pull(common.name)
flying_vec <- homerange %>%
filter(locomotion == "flying")%>%
pull(common.name)
swimming_vec <- homerange %>%
filter(locomotion == "swimming")%>%
pull(common.name)
fly_or_swim_list <- list(flying_vec, swimming_vec)
ggVennDiagram(fly_or_swim_list, category.names = c("Fly", "Swim"))
flying_vec <- homerange %>%
filter(locomotion == "flying")%>%
pull(common.name)
fly_or_swim_list <- list(flying_vec, swimming_vec)
ggVennDiagram(fly_or_swim_list, category.names = c("Fly", "Swim"))
flying_vec
bird_vec <- homerange %>%
filter(taxon == "birds")%>%
pull(common.name)
fly_or_bird_list <- list(flying_vec, bird_vec)
ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"))
homerange%>%
filter(taxon == "birds")%>%
filter(locomotion != "flying")%>%
select(common.name)
homerange
homerange$taxon
flying_vec%>%
filter(taxon!= "bird")
flying_vec%>%
filter(taxon!= "bird")%>%
filter(locomotion = "flying")%>%
select(common.name)
homerange%>%
filter(taxon == "birds")%>%
filter(locomotion != "flying")%>%
select(common.name)
flying_vec%>%
filter(taxon!= "bird")%>%
filter(locomotion == "flying")%>%
select(common.name)
flying_vec%>%
filter(taxon!= "bird")%>%
filter(locomotion == "flying")%>%
select(common.name)
flying_vec%>%
filter(taxon!= "bird")%>%
filter(locomotion == "flying")%>%
select(common.name)
flying_vec%>%
filter(taxon!= "bird")%>%
filter(locomotion == "flying")%>%
select(common.name)
homerange%>%
filter(taxon!= "bird")%>%
filter(locomotion == "flying")%>%
select(common.name)
homerange%>%
filter(locomotion == "flying")%>%
filter(taxon != "birds")%>%
select(common.name)
homerange%>%
filter(locomotion == "flying")%>%
filter(taxon != "birds"
homerange%>%
filter(locomotion == "flying")%>%
filter(taxon != "birds")
homerange%>%
filter(locomotion != "flying")%>%
filter(taxon == "birds")
homerange%>%
filter(locomotion != "flying")%>%
filter(taxon == "birds")
homerange%>%
filter(taxon!= "bird")%>%
filter(locomotion == "flying")%>%
select(common.name)
herbivore_vec <- homerange %>%
filter(trophic.guild == "herbivore")%>%
pull(common.name)
fly_bird_herbi_list <- list(flying_vec, bird_vec, herbivore_vec)
ggVennDiagram(fly_bird_herbi_list, category.names = c("Fly", "Bird", "Herbivore"))
# you can toggle edge size
venn_plot <- ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"), edge_size = 1.5)
venn_plot +
scale_fill_distiller(palette = "Greys")+ #distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly")
)
#Set Up the vectors:
#you can also recycle the one we made earlier
swimming_vec<- homerange %>%
filter(locomotion=="swimming")%>%
pull(common.name)
carni_vec<- homerange %>%
filter(trophic.guild=="carnivore")%>%
pull(common.name)
aqua_vec <- homerange %>%
filter(realm == "aquatic")%>%
pull(common.name)
ecto_vec<- homerange %>%
filter(thermoregulation =="ectotherm")%>%
pull(common.name)
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
scale_color_brewer(palette = "Set3")+
scale_color_brewer(palettes ="Purples")+
labs(title = "i am tired")
)
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
scale_color_brewer(palette = "Set3")+
scale_color_brewer(palette ="Purples")+
labs(title = "i am tired")
)
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
scale_color_brewer(palette = "Set3")+
scale_color_brewer(palette ="Greys")+
labs(title = "i am tired")
)
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
scale_color_brewer(palette = "Set3")+
scale_color_distiller(palette ="Purples")+
labs(title = "i am tired")
)
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
scale_color_brewer(palette = "Set3")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
)
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
set_color = c("orange", "red","yellow","blue"),
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
scale_color_brewer(palette = "Set3")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
)
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
set_color = c("orange", "red","yellow","blue"),
category.names = c("swimming", "carnivore","aquatic", "ectotherm"))+
scale_color_brewer(palette = "Set3")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","yellow","blue"),)+
scale_color_brewer(palette = "Set3")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","yellow","blue"))+
scale_color_brewer(palette = "Set3")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"))+
scale_color_brewer(palette = "Set3")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"))+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"), label_percent_digit = 8)+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"), label_percent_digit = 5)+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"))+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"), lable_percent_digit=NULL)+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"), lable=count)+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"), lable="count")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"), label="count")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
hr_taxon_count <- homerange %>%
count(taxon)
hr_taxon_count
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
names(homerange)
family_count <- homerange %>%
distinct(family)
family_count
repfam_count <- homerange %>%
filter(taxon=="reptile")%>%
distinct(family)
family_count
repfam_count <- homerange %>%
filter(taxon=="reptile")%>%
distinct(family)
family_count
homerange$taxon
homerange%>%
distinct(taxon)
repfam_count <- homerange %>%
filter(taxon=="lizard" |taxon=="snakes"|taxon=="turtles"|taxon=="tortoises")%>%
distinct(family)
family_count
repfam_count <- homerange %>%
filter(taxon=="lizard" & taxon=="snakes" & taxon=="turtles" & taxon=="tortoises")%>%
distinct(family)
family_count
repfam_count <- homerange %>%
filter(taxon=="lizard" & taxon=="snakes" & taxon=="turtles" & taxon=="tortoises")%>%
distinct(family)
family_count
repfam_count <- homerange %>%
filter(taxon=="lizard" | taxon=="snakes" | taxon=="turtles" | taxon=="tortoises")%>%
distinct(family)
family_count
repfam_count <- homerange %>%
filter(taxon=="lizard" | taxon=="snakes" | taxon=="turtles" | taxon=="tortoises")%>%
distinct(family)
repfam_count
repfam_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
repfam_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 25) +
theme_minimal()
repfam_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15)
repfam_count %>%
ggplot(aes(
label = family,
size = n,
color = family)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15)
repfam_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15)
repfam_count <- homerange %>%
filter(taxon=="lizard" | taxon=="snakes" | taxon=="turtles" | taxon=="tortoises")%>%
repfam_count
repfam_count <- homerange %>%
filter(taxon=="lizard" | taxon=="snakes" | taxon=="turtles" | taxon=="tortoises")%>%
count(family)
repfam_count
repfam_count %>%
ggplot(aes(
label = family,
size = n,
color = family)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15)
